import { assert, test } from 'vitest';
import { DateTime } from 'luxon';
import { IsoDate } from "./parse.js";

// This test suite compares with Luxon output for maximum backwards compatibility

const VALID_TEST_CASES = `
2016
2016-05
2016-05-25
2000-01-07
2016-05-25T09
2016-05-25T09:24
2016-05-25T09:24:15
2016-05-25T09:24:15.123
2016-05-25T09:24:15,123
2016-05-25T09Z
2016-05-25T09:24Z
2016-05-25T09:24:15Z
2016-05-25T09:24:15.123Z
2016-05-25T09:24:15,123Z
2016-05-25T09+00:00
2016-05-25T09:24+00:00
2016-05-25T09:24:15+00:00
2016-05-25T09:24:15.123+00:00
2016-05-25T09:24:15,123+00:00
2016-05-25T09+01:00
2016-05-25T09:24+01:00
2016-05-25T09:24:15+01:00
2016-05-25T09:24:15.123+01:00
2016-05-25T09:24:15,123+01:00
2016-05-25T09-01:00
2016-05-25T09:24-01:00
2016-05-25T09:24:15-01:00
2016-05-25T09:24:15.123-01:00
2016-05-25T09:24:15,123-01:00
2016-05-25T09+06:00
2016-05-25T09:24+06:00
2016-05-25T09:24:15+06:00
2016-05-25T09:24:15.123+06:00
2016-05-25T09:24:15,123+06:00
2016-05-25T09-06:00
2016-05-25T09:24-06:00
2016-05-25T09:24:15-06:00
2016-05-25T09:24:15.123-06:00
2016-05-25T09:24:15,123-06:00

// delimiters optional WHEN full number of digits are supplied for date or time
20000107
20160525

20160525T092415
20160525T092415.123
20160525T092415,123
20160525T0924

20160525T09:24:15
20160525T09:24:15.123
20160525T09:24:15,123
20160525T09:24

2016-05-25T092415
2016-05-25T092415.123
2016-05-25T092415,123
2016-05-25T0924

// Inspired by supplied test cases
2025-07-22T05:11:40+0845
`

// Some test cases from https://moment.github.io/luxon/#/parsing?id=ad-hoc-parsing
// ISO8601 date parsing https://github.com/11ty/eleventy/issues/3587
for(let line of VALID_TEST_CASES.split("\n")) {
  line = line.trim();
  if(!line || line.startsWith("//")) {
    continue;
  }

  test(`Parse ${line}`, (t) => {
    // assert.equal(received, expected)
    assert.equal(IsoDate.parse(line).toUTCString(), DateTime.fromISO(line, {zone: "utc"}).toJSDate().toUTCString());
  });
}

// These test cases are expected to fail

const INVALID_TEST_CASES = `
// Not a real date
2016-05-99
2016-05-00
2016-00-00

// Support removed (missing delimiters)
201605
202618
2016-05-25T01:

// Bad date/time delimiter
2016-05-25 12:00:00
2016-05-25t12:00:00

// Bad syntax, number of time digits
2016-05-25T1:11
2016-05-25T1:1:1
2016-05-25T01:11:1
2016-05-25T1
2016-05-25T111
2016-05-25T11111
2016-05-25T1111111

// Fractional minutes
20250721T1526.6
20250721T1526.6-0500

// Support removed (Week date)
2016-W01-1

// Support removed (Year day)
2016-200
2016200
2016-200

// Support removed (Time only)
09:24
09:24:15
09:24:15.123
09:24:15,123
`

for(let line of INVALID_TEST_CASES.split("\n")) {
  line = line.trim();
  if(!line || line.startsWith("//")) {
    continue;
  }
  test(`Bad syntax: ${line}`, (t) => {
    try {
      IsoDate.parse(line)
    } catch(e) {
      assert.isTrue(e.message.startsWith("Unsupported date format "))
      assert.isTrue(e.message.endsWith(line))
    }
  });
}

// Some Date/DateTime tests cribbed from https://ijmacd.github.io/rfc3339-iso8601/
// More info: https://ijmacd.github.io/iso8601/
// Invalid syntax is commented out (not removed) for posterity
const SUPPLIED_TEST_CASES = `
// # Dates
2025-07-21
// 20
// 202
2025
2025-07
// 2025-202
// 2025-W30
// 2025-W30-1
20250721
// 2025202
// 2025W30
// 2025W301

// # Date-Times
2025-07-21T20:26:40Z
2025-07-21T20:26:40.3Z
2025-07-21T20:26:40.39Z
2025-07-21T20:26:40.396Z
2025-07-21T20:26:40.396510Z
2025-07-21T20:26:40.396509751Z
2025-07-21T15:26:40-05:00
2025-07-21T15:26:40.3-05:00
2025-07-21T15:26:40.39-05:00
2025-07-21T15:26:40.396-05:00
2025-07-21T15:26:40.396510-05:00
2025-07-21T15:26:40.396509751-05:00
2025-07-22T05:11:40+08:45
2025-07-21T20:26:40+00:00
2025-07-21T20:26:40.396+00:00
2025-07-21T15
// 2025-07-21T15,4
// 2025-07-21T15.4
2025-07-21T15:26
// 2025-07-21T15:26,6
// 2025-07-21T15:26.6
2025-07-21T15:26:40
2025-07-21T15:26:40.3
2025-07-21T15:26:40.39
2025-07-21T15:26:40,396
2025-07-21T15:26:40.396
2025-07-21T15:26:40,396510
2025-07-21T15:26:40.396510
2025-07-21T15:26:40.396509751
2025-07-21T15:26:40,396509751
2025-07-21T20Z
// 2025-07-21T20,4Z
// 2025-07-21T20.4Z
2025-07-21T20:26Z
// 2025-07-21T20:26,6Z
// 2025-07-21T20:26.6Z
2025-07-21T20:26:40,396Z
2025-07-21T20:26:40,396510Z
2025-07-21T20:26:40,396509751Z
2025-07-21T15-05
// 2025-07-21T15,4-05
// 2025-07-21T15.4-05
2025-07-21T15:26-05
// 2025-07-21T15:26,6-05
// 2025-07-21T15:26.6-05
2025-07-21T15:26:40-05
2025-07-21T15:26:40.3-05
2025-07-21T15:26:40.39-05
2025-07-21T15:26:40,396-05
2025-07-21T15:26:40.396-05
2025-07-21T15:26:40,396510-05
2025-07-21T15:26:40.396510-05
2025-07-21T15:26:40.396509751-05
2025-07-21T15:26:40,396509751-05
2025-07-21T15-05:00
// 2025-07-21T15,4-05:00
// 2025-07-21T15.4-05:00
2025-07-21T15:26-05:00
// 2025-07-21T15:26,6-05:00
// 2025-07-21T15:26.6-05:00
2025-07-21T15:26:40,396-05:00
2025-07-21T15:26:40,396510-05:00
2025-07-21T15:26:40,396509751-05:00
// 2025-W30-1T15
// 2025-W30-1T15,4
// 2025-W30-1T15.4
// 2025-W30-1T15:26
// 2025-W30-1T15:26,6
// 2025-W30-1T15:26.6
// 2025-W30-1T15:26:40
// 2025-W30-1T15:26:40.3
// 2025-W30-1T15:26:40.39
// 2025-W30-1T15:26:40,396
// 2025-W30-1T15:26:40.396
// 2025-W30-1T15:26:40,396510
// 2025-W30-1T15:26:40.396510
// 2025-W30-1T15:26:40.396509751
// 2025-W30-1T15:26:40,396509751
// 2025-W30-1T20Z
// 2025-W30-1T20,4Z
// 2025-W30-1T20.4Z
// 2025-W30-1T20:26Z
// 2025-W30-1T20:26,6Z
// 2025-W30-1T20:26.6Z
// 2025-W30-1T20:26:40Z
// 2025-W30-1T20:26:40.3Z
// 2025-W30-1T20:26:40.39Z
// 2025-W30-1T20:26:40,396Z
// 2025-W30-1T20:26:40.396Z
// 2025-W30-1T20:26:40,396510Z
// 2025-W30-1T20:26:40.396510Z
// 2025-W30-1T20:26:40.396509751Z
// 2025-W30-1T20:26:40,396509751Z
// 2025-W30-1T15-05
// 2025-W30-1T15,4-05
// 2025-W30-1T15.4-05
// 2025-W30-1T15:26-05
// 2025-W30-1T15:26,6-05
// 2025-W30-1T15:26.6-05
// 2025-W30-1T15:26:40-05
// 2025-W30-1T15:26:40.3-05
// 2025-W30-1T15:26:40.39-05
// 2025-W30-1T15:26:40,396-05
// 2025-W30-1T15:26:40.396-05
// 2025-W30-1T15:26:40,396510-05
// 2025-W30-1T15:26:40.396510-05
// 2025-W30-1T15:26:40.396509751-05
// 2025-W30-1T15:26:40,396509751-05
// 2025-W30-1T15-05:00
// 2025-W30-1T15,4-05:00
// 2025-W30-1T15.4-05:00
// 2025-W30-1T15:26-05:00
// 2025-W30-1T15:26,6-05:00
// 2025-W30-1T15:26.6-05:00
// 2025-W30-1T15:26:40-05:00
// 2025-W30-1T15:26:40.3-05:00
// 2025-W30-1T15:26:40.39-05:00
// 2025-W30-1T15:26:40,396-05:00
// 2025-W30-1T15:26:40.396-05:00
// 2025-W30-1T15:26:40,396510-05:00
// 2025-W30-1T15:26:40.396510-05:00
// 2025-W30-1T15:26:40.396509751-05:00
// 2025-W30-1T15:26:40,396509751-05:00
// 2025-202T15
// 2025-202T15,4
// 2025-202T15.4
// 2025-202T15:26
// 2025-202T15:26,6
// 2025-202T15:26.6
// 2025-202T15:26:40
// 2025-202T15:26:40.3
// 2025-202T15:26:40.39
// 2025-202T15:26:40,396
// 2025-202T15:26:40.396
// 2025-202T15:26:40,396510
// 2025-202T15:26:40.396510
// 2025-202T15:26:40.396509751
// 2025-202T15:26:40,396509751
// 2025-202T20Z
// 2025-202T20,4Z
// 2025-202T20.4Z
// 2025-202T20:26Z
// 2025-202T20:26,6Z
// 2025-202T20:26.6Z
// 2025-202T20:26:40Z
// 2025-202T20:26:40.3Z
// 2025-202T20:26:40.39Z
// 2025-202T20:26:40,396Z
// 2025-202T20:26:40.396Z
// 2025-202T20:26:40,396510Z
// 2025-202T20:26:40.396510Z
// 2025-202T20:26:40.396509751Z
// 2025-202T20:26:40,396509751Z
// 2025-202T15-05
// 2025-202T15,4-05
// 2025-202T15.4-05
// 2025-202T15:26-05
// 2025-202T15:26,6-05
// 2025-202T15:26.6-05
// 2025-202T15:26:40-05
// 2025-202T15:26:40.3-05
// 2025-202T15:26:40.39-05
// 2025-202T15:26:40,396-05
// 2025-202T15:26:40.396-05
// 2025-202T15:26:40,396510-05
// 2025-202T15:26:40.396510-05
// 2025-202T15:26:40.396509751-05
// 2025-202T15:26:40,396509751-05
// 2025-202T15-05:00
// 2025-202T15,4-05:00
// 2025-202T15.4-05:00
// 2025-202T15:26-05:00
// 2025-202T15:26,6-05:00
// 2025-202T15:26.6-05:00
// 2025-202T15:26:40-05:00
// 2025-202T15:26:40.3-05:00
// 2025-202T15:26:40.39-05:00
// 2025-202T15:26:40,396-05:00
// 2025-202T15:26:40.396-05:00
// 2025-202T15:26:40,396510-05:00
// 2025-202T15:26:40.396510-05:00
// 2025-202T15:26:40.396509751-05:00
// 2025-202T15:26:40,396509751-05:00
20250721T15
// 20250721T15,4
// 20250721T15.4
20250721T1526
// 20250721T1526,6
// 20250721T1526.6
20250721T152640
20250721T152640.3
20250721T152640.39
20250721T152640,396
20250721T152640.396
20250721T152640,396510
20250721T152640.396510
20250721T152640.396509751
20250721T152640,396509751
20250721T20Z
// 20250721T20,4Z
// 20250721T20.4Z
20250721T2026Z
// 20250721T2026,6Z
// 20250721T2026.6Z
20250721T202640Z
20250721T202640.3Z
20250721T202640.39Z
20250721T202640,396Z
20250721T202640.396Z
20250721T202640,396510Z
20250721T202640.396510Z
20250721T202640.396509751Z
20250721T202640,396509751Z
20250721T15-05
// 20250721T15,4-05
// 20250721T15.4-05
20250721T1526-05
// 20250721T1526,6-05
// 20250721T1526.6-05
20250721T152640-05
20250721T152640.3-05
20250721T152640.39-05
20250721T152640,396-05
20250721T152640.396-05
20250721T152640,396510-05
20250721T152640.396510-05
20250721T152640.396509751-05
20250721T152640,396509751-05
20250721T15-0500
// 20250721T15,4-0500
// 20250721T15.4-0500
20250721T1526-0500
// 20250721T1526,6-0500
// 20250721T1526.6-0500
20250721T152640-0500
20250721T152640.3-0500
20250721T152640.39-0500
20250721T152640,396-0500
20250721T152640.396-0500
20250721T152640,396510-0500
20250721T152640.396510-0500
20250721T152640.396509751-0500
20250721T152640,396509751-0500
// 2025W301T15
// 2025W301T15,4
// 2025W301T15.4
// 2025W301T1526
// 2025W301T1526,6
// 2025W301T1526.6
// 2025W301T152640
// 2025W301T152640.3
// 2025W301T152640.39
// 2025W301T152640,396
// 2025W301T152640.396
// 2025W301T152640,396510
// 2025W301T152640.396510
// 2025W301T152640.396509751
// 2025W301T152640,396509751
// 2025W301T20Z
// 2025W301T20,4Z
// 2025W301T20.4Z
// 2025W301T2026Z
// 2025W301T2026,6Z
// 2025W301T2026.6Z
// 2025W301T202640Z
// 2025W301T202640.3Z
// 2025W301T202640.39Z
// 2025W301T202640,396Z
// 2025W301T202640.396Z
// 2025W301T202640,396510Z
// 2025W301T202640.396510Z
// 2025W301T202640.396509751Z
// 2025W301T202640,396509751Z
// 2025W301T15-05
// 2025W301T15,4-05
// 2025W301T15.4-05
// 2025W301T1526-05
// 2025W301T1526,6-05
// 2025W301T1526.6-05
// 2025W301T152640-05
// 2025W301T152640.3-05
// 2025W301T152640.39-05
// 2025W301T152640,396-05
// 2025W301T152640.396-05
// 2025W301T152640,396510-05
// 2025W301T152640.396510-05
// 2025W301T152640.396509751-05
// 2025W301T152640,396509751-05
// 2025W301T15-0500
// 2025W301T15,4-0500
// 2025W301T15.4-0500
// 2025W301T1526-0500
// 2025W301T1526,6-0500
// 2025W301T1526.6-0500
// 2025W301T152640-0500
// 2025W301T152640.3-0500
// 2025W301T152640.39-0500
// 2025W301T152640,396-0500
// 2025W301T152640.396-0500
// 2025W301T152640,396510-0500
// 2025W301T152640.396510-0500
// 2025W301T152640.396509751-0500
// 2025W301T152640,396509751-0500
// 2025202T15
// 2025202T15,4
// 2025202T15.4
// 2025202T1526
// 2025202T1526,6
// 2025202T1526.6
// 2025202T152640
// 2025202T152640.3
// 2025202T152640.39
// 2025202T152640,396
// 2025202T152640.396
// 2025202T152640,396510
// 2025202T152640.396510
// 2025202T152640.396509751
// 2025202T152640,396509751
// 2025202T20Z
// 2025202T20,4Z
// 2025202T20.4Z
// 2025202T2026Z
// 2025202T2026,6Z
// 2025202T2026.6Z
// 2025202T202640Z
// 2025202T202640.3Z
// 2025202T202640.39Z
// 2025202T202640,396Z
// 2025202T202640.396Z
// 2025202T202640,396510Z
// 2025202T202640.396510Z
// 2025202T202640.396509751Z
// 2025202T202640,396509751Z
// 2025202T15-05
// 2025202T15,4-05
// 2025202T15.4-05
// 2025202T1526-05
// 2025202T1526,6-05
// 2025202T1526.6-05
// 2025202T152640-05
// 2025202T152640.3-05
// 2025202T152640.39-05
// 2025202T152640,396-05
// 2025202T152640.396-05
// 2025202T152640,396510-05
// 2025202T152640.396510-05
// 2025202T152640.396509751-05
// 2025202T152640,396509751-05
// 2025202T15-0500
// 2025202T15,4-0500
// 2025202T15.4-0500
// 2025202T1526-0500
// 2025202T1526,6-0500
// 2025202T1526.6-0500
// 2025202T152640-0500
// 2025202T152640.3-0500
// 2025202T152640.39-0500
// 2025202T152640,396-0500
// 2025202T152640.396-0500
// 2025202T152640,396510-0500
// 2025202T152640.396510-0500
// 2025202T152640.396509751-0500
// 2025202T152640,396509751-0500
2025-07-22T04:26:40+08
2025-07-21T08-12
2025-07-21T08-12:00
2025-07-21T08:26-12
2025-07-21T08:26-12:00
`

for(let line of SUPPLIED_TEST_CASES.split("\n")) {
  line = line.trim();
  if(!line || line.startsWith("//")) {
    continue;
  }

  test(`Parse ${line}`, (t) => {
    // assert.equal(received, expected)
    assert.equal(IsoDate.parse(line).toUTCString(), DateTime.fromISO(line, {zone: "utc"}).toJSDate().toUTCString());
  });
}